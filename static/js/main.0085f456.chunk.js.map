{"version":3,"sources":["Algorithms/KMeans.js","Algorithms/EM.js","Components/ClusteringVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["KMeans","chart","k","n","data","this","dataToArray","array","repeatRange","shuffle","console","log","z","gammas","zeros","j","gammasColSum","colSums","centroids","i","temp","slice","push","distances","x","y","distance","Math","sqrt","index","min","Number","MAX_VALUE","length","datasets","count","floor","random","sums","rows","columns","EM","gammasCount","repeat","divideArray","mus","sigmas","h","covariance","value","numberoftimes","divisor","newArray","ClusteringVisualizer","props","chartReference","MAX_WIDTH","MAX_HEIGHT","removedPoint","dataset","algorithm","seed","state","type","label","pointBackgroundColor","pointHoverRadius","pointRadius","options","scales","xAxes","ticks","max","yAxes","handleSubmitDataset","bind","handleChangeDataset","handleSubmitAlgorithm","handleChangeAlgorithm","onMouseClick","changeColor","chartInstance","e","plotUNVotes","preventDefault","target","prototype","x_offset","chartArea","left","width","right","chart_x","nativeEvent","offsetX","toFixed","y_offset","top","height","bottom","offsetY","chart_y","addData","update","r","PI","forEach","elems","undefined","_index","splice","labels","pop","UNVotes","setTimeout","className","onClick","testButton","onSubmit","onChange","ref","reference","onElementsClick","removeData","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0085f456.chunk.js","sourcesContent":["class KMeans {\r\n\talgorithm(chart, k, n) {\r\n\t\tconst data = [];\r\n\t\tthis.dataToArray(chart, data, n, k);\r\n\t\t// console.log(data);\r\n\t\tconst array = [];\r\n\t\tthis.repeatRange(array, k, n);\r\n\t\tthis.shuffle(array);\r\n\t\tconsole.log(array);\r\n\t\tfor (let z = 0; z < 10; z++) {\r\n\t\t\tconst gammas = [];\r\n\t\t\tthis.zeros(gammas, n, k);\r\n\t\t\t// for each row in gammas, set column j based on the randomly sorted array to 1\r\n\t\t\tfor (let j = 0; j < n; j++) {\r\n\t\t\t\tgammas[j][array[j] - 1] = 1;\r\n\t\t\t}\r\n\t\t\tconst gammasColSum = this.colSums(gammas, k, n);\r\n\t\t\t// console.log(gammasColSum);\r\n\t\t\tconst centroids = [];\r\n\t\t\tfor (let i = 1; i <= k; i++) {\r\n\t\t\t\t// copy array\r\n\t\t\t\tconst temp = data.slice();\r\n\t\t\t\tfor (let j = 0; j < n; j++) {\r\n\t\t\t\t\tif (array[j] !== i) {\r\n\t\t\t\t\t\ttemp[j] = [0, 0];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcentroids.push(this.colSums(temp, 2, n));\r\n\t\t\t\tcentroids[i - 1][0] /= gammasColSum[i - 1];\r\n\t\t\t\tcentroids[i - 1][1] /= gammasColSum[i - 1];\r\n\t\t\t}\r\n\t\t\t// console.log(centroids);\r\n\t\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\t\tconst distances = [];\r\n\t\t\t\tfor (let j = 0; j < k; j++) {\r\n\t\t\t\t\t// get euclidean distances\r\n\t\t\t\t\tlet x = data[i][0] - centroids[j][0];\r\n\t\t\t\t\tx *= x;\r\n\t\t\t\t\tlet y = data[i][0] - centroids[j][0];\r\n\t\t\t\t\ty *= y;\r\n\t\t\t\t\tlet distance = Math.sqrt(x + y);\r\n\t\t\t\t\tdistances.push(distance);\r\n\t\t\t\t}\r\n\t\t\t\t// find min distance and change point to new k value\r\n\t\t\t\tlet index = 0;\r\n\t\t\t\tlet min = Number.MAX_VALUE;\r\n\t\t\t\tfor (let k = 0; k < distances.length; k++) {\r\n\t\t\t\t\tif (distances[k] < min) {\r\n\t\t\t\t\t\tindex = k;\r\n\t\t\t\t\t\tmin = distances[k];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tarray[i] = index + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\tdataToArray(chart, data, n, k) {\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tdata.push([]);\r\n\t\t\tdata[i][0] = chart.data.datasets[0].data[i].x;\r\n\t\t\tdata[i][1] = chart.data.datasets[0].data[i].y;\r\n\t\t}\r\n\t}\r\n\r\n\trepeatRange(array, k, n) {\r\n\t\tlet count = 0;\r\n\t\twhile (count < n) {\r\n\t\t\tfor (let i = 1; i < k + 1; i++) {\r\n\t\t\t\tif (count < n) {\r\n\t\t\t\t\tarray.push(i);\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// randomly reorder array\r\n\tshuffle(array) {\r\n\t\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\t\tlet j = Math.floor(Math.random() * (i + 1));\r\n\t\t\tlet temp = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\tcolSums(array, k, n) {\r\n\t\tconst sums = [];\r\n\t\tfor (let i = 0; i < k; i++) {\r\n\t\t\tsums.push(0);\r\n\t\t}\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tfor (let j = 0; j < k; j++) {\r\n\t\t\t\tsums[j] += array[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sums;\r\n\t}\r\n\r\n\tzeros(array, rows, columns) {\r\n\t\tfor (let i = 0; i < rows; i++) {\r\n\t\t\tarray.push([0]);\r\n\t\t\tfor (let j = 0; j < columns; j++) {\r\n\t\t\t\tarray[i][j] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default KMeans;","class EM {\r\n\talgorithm(chart, k, n) {\r\n\t\t// console.log(chart.data.datasets[0].data[0].x);\r\n\t\tconst array = [3,2,3,1,2,1];\r\n\t\t// this.repeatRange(array, k, n);\r\n\t\t// this.shuffle(array);\r\n\t\t// console.log(array);\r\n\t\tconst gammas = [];\r\n\t\tthis.zeros(gammas, n, k);\r\n\t\t// for each row in gammas, set column j based on the randomly sorted array to 1\r\n\t\tfor (let j = 0; j < n; j++) {\r\n\t\t\tgammas[j][array[j]-1] = 1;\r\n\t\t}\r\n\t\t// console.log(gammas);\r\n\t\tconst gammasColSum = this.colSums(gammas, k, n);\r\n\t\t// console.log(gammasColSum);\r\n\t\tconst gammasCount = [];\r\n\t\tthis.repeat(gammasCount, n, k);\r\n\t\tconst pis = this.divideArray(gammasColSum, gammasCount);\r\n\t\t// console.log(pis);\r\n\t\tconst data = [];\r\n\t\tthis.dataToArray(chart, data, n, k);\r\n\t\t// console.log(data);\r\n\t\tlet mus = [];\r\n\t\t// k = 3, columns = 2 (x, y)\r\n\t\tthis.zeros(mus, 3, 2);\r\n\t\tlet sigmas = [];\r\n\t\tfor (let j = 0; j < k; j++) {\r\n\t\t\tsigmas.push([]);\r\n\t\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\t\tmus[j][0] += data[i][0] * gammas[i][j];\r\n\t\t\t\tmus[j][1] += data[i][1] * gammas[i][j];\r\n\t\t\t\tsigmas[j].push([data[i][0] * gammas[i][j], data[i][1] * gammas[i][j]]);\r\n\t\t\t}\r\n\t\t\tmus[j][0] /= gammasColSum[j];\r\n\t\t\tmus[j][1] /= gammasColSum[j];\r\n\r\n\t\t}\r\n\t\t// console.log(mus);\r\n\t\t// console.log(sigmas);\r\n\t\t// console.log(sigmas[0]);\r\n\t\tfor (let h = 0; h < 3; h++) {\r\n\t\t\tlet covariance = [];\r\n\t\t\tthis.zeros(covariance, 2, 2);\r\n\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\tfor (let j = 0; j < n; j++) {\r\n\t\t\t\t\tcovariance[i][0] += sigmas[h][j][i] * data[j][0];\r\n\t\t\t\t\tcovariance[i][1] += sigmas[h][j][i] * data[j][1];\r\n\t\t\t\t}\r\n\t\t\t\tcovariance[i][0] /= gammasColSum[1];\r\n\t\t\t\tcovariance[i][1] /= gammasColSum[1];\r\n\t\t\t}\r\n\t\t\tsigmas[h] = covariance;\r\n\t\t}\r\n\t\tconsole.log(sigmas);\r\n\t\t\r\n\t}\r\n\r\n\tdataToArray(chart, data, n, k) {\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tdata.push([]);\r\n\t\t\tdata[i][0] = chart.data.datasets[0].data[i].x;\r\n\t\t\tdata[i][1] = chart.data.datasets[0].data[i].y;\r\n\t\t}\r\n\t}\r\n\r\n\trepeatRange(array, k, n) {\r\n\t\tlet count = 0;\r\n\t\twhile (count < n) {\r\n\t\t\tfor (let i = 1; i < k + 1; i++) {\r\n\t\t\t\tif (count < n) {\r\n\t\t\t\t\tarray.push(i);\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trepeat(array, value, numberoftimes) {\r\n\t\tfor (let i = 0; i < numberoftimes; i++) {\r\n\t\t\tarray.push(value);\r\n\t\t}\r\n\t}\r\n\r\n\t// randomly reorder array\r\n\tshuffle(array) {\r\n\t\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\t\tlet j = Math.floor(Math.random() * (i + 1));\r\n\t\t\tlet temp = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\tzeros(array, rows, columns) {\r\n\t\tfor (let i = 0; i < rows; i++) {\r\n\t\t\tarray.push([0]);\r\n\t\t\tfor (let j = 0; j < columns; j++) {\r\n\t\t\t\tarray[i][j] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcolSums(array, k, n) {\r\n\t\tconst sums = [];\r\n\t\tfor (let i = 0; i < k; i++) {\r\n\t\t\tsums.push(0);\r\n\t\t}\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tfor (let j = 0; j < k; j++) {\r\n\t\t\t\tsums[j] += array[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sums;\r\n\t}\r\n\r\n\tdivideArray(array, divisor) {\r\n\t\tconst newArray = [];\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tnewArray.push(array[i] / divisor[i]);\r\n\t\t}\r\n\t\treturn newArray;\r\n\t}\r\n}\r\n\r\nexport default EM;","import React, { Component } from 'react';\nimport './ClusteringVisualizer.css';\nimport { Scatter } from 'react-chartjs-2';\n// datasets\nimport UNVotes from '../Data/UN_Votes_MDS.json';\r\n// algorithms\r\nimport KMeans from '../Algorithms/KMeans.js';\r\nimport EM from '../Algorithms/EM.js';\r\n\nclass ClusteringVisualizer extends Component {\n\tchartReference = {};\n\n\tMAX_WIDTH = 30;\n\tMAX_HEIGHT = 16;\n\n\tremovedPoint = false;\n\n\tdataset = 'none';\n\talgorithm = 'none';\n\n\tseed = 1;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttype: 'scatter',\n\t\t\tdata: {\n\t\t\t\tdatasets: [{\n\t\t\t\t\tlabel: 'Scatter Dataset',\n\t\t\t\t\tdata: [{\n\t\t\t\t\t\tx: 1,\n\t\t\t\t\t\ty: 1\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 2,\n\t\t\t\t\t\ty: 2\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3.5,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3.6,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}],\n\t\t\t\t\tpointBackgroundColor: ['Blue', 'Blue', 'Blue', 'Blue'],\n\t\t\t\t\tpointHoverRadius: 5,\n\t\t\t\t\tpointRadius: 5\n\t\t\t\t}]\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tscales: {\n\t\t\t\t\txAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: this.MAX_WIDTH\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: this.MAX_HEIGHT\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.handleSubmitDataset = this.handleSubmitDataset.bind(this);\n\t\tthis.handleChangeDataset = this.handleChangeDataset.bind(this);\n\t\tthis.handleSubmitAlgorithm = this.handleSubmitAlgorithm.bind(this);\n\t\tthis.handleChangeAlgorithm = this.handleChangeAlgorithm.bind(this);\n\t\tthis.onMouseClick = this.onMouseClick.bind(this);\n\t\tthis.changeColor = this.changeColor.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log(this.chartReference.chartInstance.data.datasets[0].pointBackgroundColor[0]);\n\t\t//for (let k = 0; k < 10; k++) {\r\n\t\t//\tconsole.log(this.psora(k, this.seed));\r\n\t\t//}\n\t}\n\n\thandleSubmitDataset(e) {\n\t\tif (this.dataset === 'unvotes') {\n\t\t\tthis.plotUNVotes(); // will change state of data\n\t\t}\n\t\te.preventDefault();\n\t}\n\n\thandleChangeDataset(e) {\n\t\tthis.dataset = e.target.value;\n\t\tconsole.log(e.target.value);\n\t}\n\n\thandleSubmitAlgorithm(e) {\n\t\tif (this.algorithm === 'kmeans') {\n\t\t\tconst array = KMeans.prototype.algorithm(this.chartReference.chartInstance, 3, 77);\n\t\t\tconsole.log(array);\n\t\t\tthis.changeColor(this.chartReference.chartInstance, array);\n\t\t} else if (this.algorithm === 'em') {\n\t\t\tEM.prototype.algorithm(this.chartReference.chartInstance, 3, 6);\n\t\t}\n\t\te.preventDefault();\n\t}\n\n\thandleChangeAlgorithm(e) {\n\t\tthis.algorithm = e.target.value;\n\t\tconsole.log(e.target.value);\n\t}\n\n\tonMouseClick(e) {\n\t\tif (!this.removedPoint) {\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\t// scale event's x-value to chart's x-value\n\t\t\tconst x_offset = chart.chartArea.left;\n\t\t\tconst width = chart.chartArea.right - x_offset;\n\t\t\tconst x = e.nativeEvent.offsetX - x_offset;\n\t\t\tconst chart_x = (x / width * this.MAX_WIDTH).toFixed(2);\n\t\t\t// scale event's y-value to chart's y-value\n\t\t\tconst y_offset = chart.chartArea.top;\n\t\t\tconst height = chart.chartArea.bottom - y_offset;\n\t\t\tconst y = e.nativeEvent.offsetY - y_offset;\n\t\t\tconst chart_y = (this.MAX_HEIGHT - y / height * this.MAX_HEIGHT).toFixed(2);\n\t\t\t// check if chart_x and chart_y are within visible plot width, then add to plot\n\t\t\tif (chart_y <= this.MAX_WIDTH && chart_y <= this.MAX_HEIGHT) {\n\t\t\t\tthis.addData(chart, { x: chart_x, y: chart_y });\n\t\t\t\tconsole.log(\"added (\" + chart_x + \", \" + chart_y + \")\");\n\t\t\t}\n\t\t}\n\t}\n\n\tchangeColor(chart, array) {\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tif (array[i] === 1) {\n\t\t\t\tchart.data.datasets[0].pointBackgroundColor[i] = 'Green';\n\t\t\t} else if (array[i] === 2) {\n\t\t\t\tchart.data.datasets[0].pointBackgroundColor[i] = 'Red';\n\t\t\t} else {\n\t\t\t\tchart.data.datasets[0].pointBackgroundColor[i] = 'Purple';\n\t\t\t}\n\t\t}\n\t\tchart.update();\n\t}\n\n\tpsora(k, n) {\n\t\tconst r = Math.PI * (k ^ n);\n\t\treturn r - Math.floor(r);\n\t}\n\n\taddData(chart, data) {\n\t\tchart.data.datasets.forEach((dataset) => {\n\t\t\tdataset.data.push(data);\n\t\t\tdataset.pointBackgroundColor.push('Green');\n\t\t});\n\t\tchart.update();\n\t}\n\n\tremoveData(elems) {\n\t\tif (elems[0] === undefined) {\n\t\t\tconsole.log(\"nothing there\");\n\t\t\tthis.removedPoint = false;\n\t\t} else {\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\tconst index = elems[0]._index;\n\t\t\tconsole.log(index);\n\t\t\tchart.data.datasets[0].data.splice(index, 1); // 0 default until i add example datasets\n\t\t\tchart.update();\n\t\t\tthis.removedPoint = true;\n\t\t}\n\t}\n\n\tplotUNVotes() {\n\t\tconst chart = this.chartReference.chartInstance;\n\t\t// clear previous data\n\t\twhile (this.state.data.datasets[0].data.length > 0) {\n\t\t\tchart.data.labels.pop();\n\t\t\tchart.data.datasets.forEach((dataset) => {\n\t\t\t\tdataset.data.pop();\n\t\t\t});\n\t\t}\n\t\tlet count = 0;\n\t\tUNVotes.forEach((data) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tchart.data.datasets[0].data.push(data);\n\t\t\t\tchart.data.datasets[0].pointBackgroundColor.push('Blue');\n\t\t\t\tchart.update();\n\t\t\t}, 25 * count);\n\t\t\tcount++;\n\t\t\tconsole.log(count);\n\t\t});\n\t}\n\n\ttestButton() {\n\t\tconsole.log(\"for testing only\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1>Clustering Visualizer</h1>\n\t\t\t\t<button type=\"button\" onClick={this.testButton}>test button</button>\n\t\t\t\t<div className='datasets' onSubmit={this.handleSubmitDataset} >\n\t\t\t\t\t<form onChange={this.handleChangeDataset}>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tExample Datasets:\n\t\t\t\t\t\t<select width={100} height={100}>\n\t\t\t\t\t\t\t\t<option value=\"none\">None</option>\n\t\t\t\t\t\t\t\t<option value=\"unvotes\">UN Votes</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<div className='algorithms' onSubmit={this.handleSubmitAlgorithm} >\n\t\t\t\t\t<form onChange={this.handleChangeAlgorithm}>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tAlgorithms:\n\t\t\t\t\t\t<select width={100} height={100}>\n\t\t\t\t\t\t\t\t<option value=\"none\">None</option>\n\t\t\t\t\t\t\t\t<option value=\"kmeans\">K-Means</option>\n\t\t\t\t\t\t\t\t<option value=\"em\">EM</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<div className='chart' onClick={!this.removedPoint ? this.onMouseClick : undefined} >\n\t\t\t\t\t<Scatter ref={(reference) => this.chartReference = reference} data={this.state.data} options={this.state.options} onElementsClick={(elems) => { this.removeData(elems); }} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ClusteringVisualizer;\n","import React from 'react';\nimport './App.css';\nimport ClusteringVisualizer from './Components/ClusteringVisualizer';\r\n\nfunction App() {\n  return (\n\t  <div className=\"App\">\n\t\t  <ClusteringVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}