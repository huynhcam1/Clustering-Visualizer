{"version":3,"sources":["Algorithms/EM.js","Components/ClusteringVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["EM","k","n","array","this","repeatRange","shuffle","console","log","gammas","zeros","j","pis","divideArray","colSums","count","i","push","length","Math","floor","random","temp","rows","columns","sums","ClusteringVisualizer","props","chartReference","MAX_WIDTH","MAX_HEIGHT","removedPoint","algorithm","seed","state","type","data","datasets","label","x","y","pointBackgroundColor","pointHoverRadius","pointRadius","options","scales","xAxes","ticks","min","max","yAxes","handleSubmit","bind","handleChange","onMouseClick","changeColor","prototype","e","plotUNVotes","preventDefault","target","value","chart","chartInstance","x_offset","chartArea","left","width","right","chart_x","nativeEvent","offsetX","toFixed","y_offset","top","height","bottom","offsetY","chart_y","addData","update","r","PI","forEach","dataset","elems","undefined","index","_index","splice","labels","pop","UNVotes","setTimeout","className","onClick","onSubmit","onChange","ref","reference","onElementsClick","removeData","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e80f4086.chunk.js","sourcesContent":["class EM {\r\n\talgorithm(k, n) {\r\n\t\tconst array = [];\r\n\t\tthis.repeatRange(array, k, n);\r\n\t\tthis.shuffle(array);\r\n\t\tconsole.log(array);\r\n\t\tconst gammas = [];\r\n\t\tthis.zeros(gammas, n, k);\r\n\t\t// for each row in gammas, set column j based on the randomly sorted array to 1\r\n\t\tfor (let j = 0; j < n; j++) {\r\n\t\t\tgammas[j][array[j]-1] = 1;\r\n\t\t}\r\n\t\tconsole.log(gammas);\r\n\t\tconst pis = this.divideArray(this.colSums(gammas, k, n), n);\r\n\t\tconsole.log(pis);\r\n\t}\r\n\r\n\trepeatRange(array, k, n) {\r\n\t\tlet count = 0;\r\n\t\twhile (count < n) {\r\n\t\t\tfor (let i = 1; i < k + 1; i++) {\r\n\t\t\t\tif (count < n) {\r\n\t\t\t\t\tarray.push(i);\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// randomly reorder array\r\n\tshuffle(array) {\r\n\t\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\t\tlet j = Math.floor(Math.random() * (i + 1));\r\n\t\t\tlet temp = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\tzeros(array, rows, columns) {\r\n\t\tfor (let i = 0; i < rows; i++) {\r\n\t\t\tarray.push([0])\r\n\t\t\tfor (let j = 0; j < columns; j++) {\r\n\t\t\t\tarray[i][j] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcolSums(array, k, n) {\r\n\t\tconst sums = [];\r\n\t\tfor (let i = 0; i < k; i++) {\r\n\t\t\tsums.push(0);\r\n\t\t}\r\n\t\tconsole.log(sums);\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tfor (let j = 0; j < k; j++) {\r\n\t\t\t\tif (array[i][j] === 1) {\r\n\t\t\t\t\tsums[j]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sums;\r\n\t}\r\n\r\n\tdivideArray(array, n) {\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tarray[i] /= n;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n}\r\n\r\nexport default EM;","import React, { Component } from 'react';\nimport './ClusteringVisualizer.css';\nimport { Scatter } from 'react-chartjs-2';\nimport EM from '../Algorithms/EM.js';\nimport UNVotes from '../Data/UN_Votes_MDS.json';\r\n\nclass ClusteringVisualizer extends Component {\n\tchartReference = {};\n\n\tMAX_WIDTH = 30;\n\tMAX_HEIGHT = 16;\n\n\tremovedPoint = false;\n\n\talgorithm = 'none';\n\n\tseed = 1;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttype: 'scatter',\n\t\t\tdata: {\n\t\t\t\tdatasets: [{\n\t\t\t\t\tlabel: 'Scatter Dataset',\n\t\t\t\t\tdata: [{\n\t\t\t\t\t\tx: 1,\n\t\t\t\t\t\ty: 1\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 2,\n\t\t\t\t\t\ty: 2\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3.5,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3.6,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}],\n\t\t\t\t\tpointBackgroundColor: 'rgba(0, 0, 255, 1)',\n\t\t\t\t\tpointHoverRadius: 5,\n\t\t\t\t\tpointRadius: 5\n\t\t\t\t}]\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tscales: {\n\t\t\t\t\txAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: this.MAX_WIDTH\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: this.MAX_HEIGHT\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.onMouseClick = this.onMouseClick.bind(this);\n\t\tthis.changeColor = this.changeColor.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tEM.prototype.algorithm(3,77);\n\t\t//for (let k = 0; k < 10; k++) {\r\n\t\t//\tconsole.log(this.psora(k, this.seed));\r\n\t\t//}\n\t}\n\n\thandleSubmit(e) {\n\t\tif (this.algorithm === 'unvotes') {\n\t\t\tthis.plotUNVotes(); // will change state of data\n\t\t}\n\t\te.preventDefault();\n\t}\n\n\thandleChange(e) {\n\t\tthis.algorithm = e.target.value;\n\t\tconsole.log(e.target.value);\n\t}\n\n\tonMouseClick(e) {\n\t\tif (!this.removedPoint) {\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\t// scale event's x-value to chart's x-value\n\t\t\tconst x_offset = chart.chartArea.left;\n\t\t\tconst width = chart.chartArea.right - x_offset;\n\t\t\tconst x = e.nativeEvent.offsetX - x_offset;\n\t\t\tconst chart_x = (x / width * this.MAX_WIDTH).toFixed(2);\n\t\t\t// scale event's y-value to chart's y-value\n\t\t\tconst y_offset = chart.chartArea.top;\n\t\t\tconst height = chart.chartArea.bottom - y_offset;\n\t\t\tconst y = e.nativeEvent.offsetY - y_offset;\n\t\t\tconst chart_y = (this.MAX_HEIGHT - y / height * this.MAX_HEIGHT).toFixed(2);\n\t\t\t// check if chart_x and chart_y are within visible plot width, then add to plot\n\t\t\tif (chart_y <= this.MAX_WIDTH && chart_y <= this.MAX_HEIGHT) {\n\t\t\t\tthis.addData(chart, { x: chart_x, y: chart_y });\n\t\t\t\tconsole.log(\"added (\" + chart_x + \", \" + chart_y + \")\");\n\t\t\t}\n\t\t}\n\t}\n\n\tchangeColor() {\n\t\tconst chart = this.chartReference.chartInstance;\n\t\tlet count = 1;\n\t\tconst r = 1;\n\t\tconst g = 255;\n\t\tconst b = 203;\n\t\tchart.data.datasets.push(\n\t\t\t{\n\t\t\t\tlabel: 'Cluster ' + count,\n\t\t\t\tdata: [{\n\t\t\t\t\tx: 7,\n\t\t\t\t\ty: 7\n\t\t\t\t}, {\n\t\t\t\t\tx: 9,\n\t\t\t\t\ty: 9\n\t\t\t\t}, {\n\t\t\t\t\tx: 10.5,\n\t\t\t\t\ty: 10\n\t\t\t\t}, {\n\t\t\t\t\tx: 15.6,\n\t\t\t\t\ty: 15\n\t\t\t\t}],\n\t\t\t\tpointBackgroundColor: 'rgba(' + r + ', ' + g + ',' + b + ', 1)',\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointRadius: 5\n\t\t\t});\n\t\tchart.update();\n\t}\n\n\tpsora(k, n) {\n\t\tconst r = Math.PI * (k ^ n);\n\t\treturn r - Math.floor(r);\n\t}\n\n\taddData(chart, data) {\n\t\tchart.data.datasets.forEach((dataset) => {\n\t\t\tdataset.data.push(data);\n\t\t});\n\t\tchart.update();\n\t}\n\n\tremoveData(elems) {\n\t\tif (elems[0] === undefined) {\n\t\t\tconsole.log(\"nothing there\");\n\t\t\tthis.removedPoint = false;\n\t\t} else {\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\tconst index = elems[0]._index;\n\t\t\tconsole.log(index);\n\t\t\tchart.data.datasets[0].data.splice(index, 1); // 0 default until i add example datasets\n\t\t\tchart.update();\n\t\t\tthis.removedPoint = true;\n\t\t}\n\t}\n\n\tplotUNVotes() {\n\t\tconst chart = this.chartReference.chartInstance;\n\t\t// clear previous data\n\t\twhile (this.state.data.datasets[0].data.length > 0) {\n\t\t\tchart.data.labels.pop();\n\t\t\tchart.data.datasets.forEach((dataset) => {\n\t\t\t\tdataset.data.pop();\n\t\t\t});\n\t\t}\n\t\tlet count = 0;\n\t\tUNVotes.forEach((data) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tchart.data.datasets[0].data.push(data);\n\t\t\t\tchart.update();\n\t\t\t}, 25 * count);\n\t\t\tcount++;\n\t\t\tconsole.log(count);\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1>Clustering Visualizer</h1>\n\t\t\t\t<button type=\"button\" onClick={this.changeColor}>Click Me!</button>\n\t\t\t\t<div className='datasets' onSubmit={this.handleSubmit} >\n\t\t\t\t\t<form onChange={this.handleChange}>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tExample Datasets:\n\t\t\t\t\t\t<select width={100} height={100}>\n\t\t\t\t\t\t\t\t<option value=\"none\">None</option>\n\t\t\t\t\t\t\t\t<option value=\"unvotes\">UN Votes</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<div className='algorithms' onSubmit={this.handleSubmit} >\n\t\t\t\t\t<form onChange={this.handleChange}>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tAlgorithms:\n\t\t\t\t\t\t<select width={100} height={100}>\n\t\t\t\t\t\t\t\t<option value=\"none\">None</option>\n\t\t\t\t\t\t\t\t<option value=\"em\">EM Algorithm</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<div className='chart' onClick={!this.removedPoint ? this.onMouseClick : undefined} >\n\t\t\t\t\t<Scatter ref={(reference) => this.chartReference = reference} data={this.state.data} options={this.state.options} onElementsClick={(elems) => { this.removeData(elems); }} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ClusteringVisualizer;\n","import React from 'react';\nimport './App.css';\nimport ClusteringVisualizer from './Components/ClusteringVisualizer';\r\n\nfunction App() {\n  return (\n\t  <div className=\"App\">\n\t\t  <ClusteringVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}