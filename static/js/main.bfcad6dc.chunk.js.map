{"version":3,"sources":["Components/ClusteringVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["ClusteringVisualizer","props","chartReference","MAX_WIDTH","MAX_HEIGHT","removedPoint","algorithm","state","type","data","datasets","label","x","y","pointBackgroundColor","pointHoverRadius","pointRadius","options","scales","xAxes","ticks","min","max","yAxes","handleSubmit","bind","handleChange","onMouseClick","e","this","plotUNVotes","preventDefault","target","value","console","log","chart","chartInstance","x_offset","chartArea","left","width","right","chart_x","nativeEvent","offsetX","toFixed","y_offset","top","height","bottom","offsetY","chart_y","addData","labels","push","forEach","dataset","update","elems","undefined","index","_index","splice","length","pop","count","UNVotes","setTimeout","className","onSubmit","onChange","onClick","ref","reference","onElementsClick","removeData","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfcad6dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ClusteringVisualizer.css';\nimport { Scatter } from 'react-chartjs-2';\nimport UNVotes from '../Data/UN_Votes_MDS.json';\n\nclass ClusteringVisualizer extends Component {\n\tchartReference = {};\n\n\tMAX_WIDTH = 30;\n\tMAX_HEIGHT = 16;\n\n\tremovedPoint = false;\n\n\talgorithm = 'none'\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttype: 'scatter',\n\t\t\tdata: {\n\t\t\t\tdatasets: [{\n\t\t\t\t\tlabel: 'Scatter Dataset',\n\t\t\t\t\tdata: [{\n\t\t\t\t\t\tx: 1,\n\t\t\t\t\t\ty: 1\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 2,\n\t\t\t\t\t\ty: 2\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3.5,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3.6,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}],\n\t\t\t\t\tpointBackgroundColor: 'rgba(0, 0, 255, 1)',\n\t\t\t\t\tpointHoverRadius: 5,\n\t\t\t\t\tpointRadius: 5\n\t\t\t\t}]\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tscales: {\n\t\t\t\t\txAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: this.MAX_WIDTH\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: this.MAX_HEIGHT\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.onMouseClick = this.onMouseClick.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\t//console.log(this.state.data.datasets[0].data.length);\n\t}\n\n\thandleSubmit(e) {\n\t\tif (this.algorithm === 'unvotes') {\n\t\t\tthis.plotUNVotes(); // will change state of data\n\t\t}\n\t\te.preventDefault();\n\t}\n\n\thandleChange(e) {\n\t\tthis.algorithm = e.target.value;\n\t\tconsole.log(e.target.value);\n\t}\n\n\tonMouseClick(e) {\n\t\tif (!this.removedPoint) {\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\t// scale event's x-value to chart's x-value\n\t\t\tconst x_offset = chart.chartArea.left;\n\t\t\tconst width = chart.chartArea.right - x_offset;\n\t\t\tconst x = e.nativeEvent.offsetX - x_offset;\n\t\t\tconst chart_x = (x / width * this.MAX_WIDTH).toFixed(2);\n\t\t\t// scale event's y-value to chart's y-value\n\t\t\tconst y_offset = chart.chartArea.top;\n\t\t\tconst height = chart.chartArea.bottom - y_offset;\n\t\t\tconst y = e.nativeEvent.offsetY - y_offset;\n\t\t\tconst chart_y = (this.MAX_HEIGHT - y / height * this.MAX_HEIGHT).toFixed(2);\n\t\t\t// check if chart_x and chart_y are within visible plot width, then add to plot\n\t\t\tif (chart_y <= this.MAX_WIDTH && chart_y <= this.MAX_HEIGHT) {\n\t\t\t\tthis.addData(chart, 'Scatter Dataset', { x: chart_x, y: chart_y });\n\t\t\t\tconsole.log(\"added (\" + chart_x + \", \" + chart_y + \")\");\n\t\t\t}\n\t\t}\n\t}\n\n\taddData(chart, label, data) {\n\t\tchart.data.labels.push(label);\n\t\tchart.data.datasets.forEach((dataset) => {\n\t\t\tdataset.data.push(data);\n\t\t});\n\t\tchart.update();\n\t}\n\n\tremoveData(elems) {\n\t\tif (elems[0] === undefined) {\n\t\t\tconsole.log(\"nothing there\");\n\t\t\tthis.removedPoint = false;\n\t\t} else {\n\t\t\tconst index = elems[0]._index;\n\t\t\tconsole.log(index);\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\tchart.data.datasets[0].data.splice(index, 1); // 0 default until i add example datasets\n\t\t\tchart.update();\n\t\t\tthis.removedPoint = true;\n\t\t}\n\t}\n\n\tplotUNVotes() {\n\t\tconst chart = this.chartReference.chartInstance;\n\t\t// clear previous data\n\t\twhile (this.state.data.datasets[0].data.length > 0) {\n\t\t\tchart.data.labels.pop();\n\t\t\tchart.data.datasets.forEach((dataset) => {\n\t\t\t\tdataset.data.pop();\n\t\t\t});\n\t\t}\n\t\tlet count = 0;\n\t\tUNVotes.forEach((data) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tchart.data.datasets[0].data.push(data);\n\t\t\t\tchart.update();\n\t\t\t}, 25 * count);\n\t\t\tcount++;\n\t\t\tconsole.log(count);\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1>Clustering Visualizer</h1>\n\t\t\t\t<div className='datasets' onSubmit={this.handleSubmit} >\n\t\t\t\t\t<form onChange={this.handleChange}>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tExample Datasets:\n\t\t\t\t\t\t<select width={100} height={100}>\n\t\t\t\t\t\t\t\t<option value=\"none\">None</option>\n\t\t\t\t\t\t\t\t<option value=\"unvotes\">UN Votes</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<div className='algorithms' onSubmit={this.handleSubmit} >\n\t\t\t\t\t<form onChange={this.handleChange}>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tAlgorithms:\n\t\t\t\t\t\t<select width={100} height={100}>\n\t\t\t\t\t\t\t\t<option value=\"none\">None</option>\n\t\t\t\t\t\t\t\t<option value=\"em\">EM Algorithm</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<div className='chart' onClick={!this.removedPoint ? this.onMouseClick : undefined} >\n\t\t\t\t\t<Scatter ref={(reference) => this.chartReference = reference} data={this.state.data} options={this.state.options} onElementsClick={(elems) => { this.removeData(elems); }} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ClusteringVisualizer;\n","import React from 'react';\nimport './App.css';\nimport ClusteringVisualizer from './Components/ClusteringVisualizer';\r\n\nfunction App() {\n  return (\n\t  <div className=\"App\">\n\t\t  <ClusteringVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}