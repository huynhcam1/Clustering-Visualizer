{"version":3,"sources":["Components/ClusteringVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["ClusteringVisualizer","props","state","x","y","type","data","datasets","label","options","scales","xAxes","ticks","min","max","yAxes","add","chartReference","onMouseClick","bind","console","log","this","e","addData","chart","chartInstance","labels","push","forEach","dataset","update","elems","undefined","index","_index","splice","className","onClick","ref","reference","onElementsClick","removeData","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPA8FeA,E,YA1Fd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACZC,EAAG,GACHC,EAAG,GACHC,KAAM,UACNC,KAAM,CACLC,SAAU,CAAC,CACVC,MAAO,kBACPF,KAAM,CAAC,CACNH,EAAG,EACHC,EAAG,GACD,CACFD,EAAG,EACHC,EAAG,GACD,CACFD,EAAG,EACHC,EAAG,OAINK,QAAS,CACRC,OAAQ,CACPC,MAAO,CAAC,CACPC,MAAO,CACNC,IAAK,EACLC,IAAK,MAGPC,MAAO,CAAC,CACPH,MAAO,CACNC,IAAK,EACLC,IAAK,SAOV,EAAKE,KAAM,EACX,EAAKC,eAAiB,GACtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAzCF,E,iFA6ClBC,QAAQC,IAAIC,KAAKL,kB,mCAGLM,GAGRD,KAAKN,MACRM,KAAKE,QAAQ,kBAAmB,CAAErB,EAAG,EAAGC,EAAG,KAC3CgB,QAAQC,IAAI,OACZC,KAAKN,KAAM,K,8BAILR,EAAOF,GACd,IAAMmB,EAAQH,KAAKL,eAAeS,cAClCD,EAAMnB,KAAKqB,OAAOC,KAAKpB,GACvBiB,EAAMnB,KAAKC,SAASsB,SAAQ,SAACC,GAC5BA,EAAQxB,KAAKsB,KAAKtB,MAEnBmB,EAAMM,W,iCAGIC,GACV,QAAiBC,IAAbD,EAAM,GACTZ,QAAQC,IAAI,iBACZC,KAAKN,KAAM,MACL,CACN,IAAMkB,EAAQF,EAAM,GAAGG,OACvBf,QAAQC,IAAIa,GACZ,IAAMT,EAAQH,KAAKL,eAAeS,cAClCD,EAAMnB,KAAKC,SAAS,GAAGD,KAAK8B,OAAOF,EAAO,GAC1CT,EAAMM,SACNT,KAAKN,KAAM,K,+BAIH,IAAD,OACR,OACC,yBAAKqB,UAAU,QAAQC,QAAShB,KAAKN,IAAMM,KAAKJ,kBAAee,GAC9D,kBAAC,IAAD,CAASM,IAAK,SAACC,GAAD,OAAe,EAAKvB,eAAiBuB,GAAWlC,KAAMgB,KAAKpB,MAAMI,KAAMG,QAASa,KAAKpB,MAAMO,QAASgC,gBAAiB,SAACT,GAAY,EAAKU,WAAWV,W,GArFjIW,aCSpBC,MARf,WACE,OACC,yBAAKP,UAAU,OACd,kBAAC,EAAD,QCKgBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6a5babb6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Scatter } from 'react-chartjs-2';\n\nclass ClusteringVisualizer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tx: 30, // x: 0 range: (30, width-10)\n\t\t\ty: 32, // y: 10 range: (height-30, 32)\n\t\t\ttype: 'scatter',\n\t\t\tdata: {\n\t\t\t\tdatasets: [{\n\t\t\t\t\tlabel: 'Scatter Dataset',\n\t\t\t\t\tdata: [{\n\t\t\t\t\t\tx: 1,\n\t\t\t\t\t\ty: 1\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 2,\n\t\t\t\t\t\ty: 2\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}]\n\t\t\t\t}]\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tscales: {\n\t\t\t\t\txAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: 10\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: 10\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.add = true;\n\t\tthis.chartReference = {};\n\t\tthis.onMouseClick = this.onMouseClick.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log(this.chartReference);\n\t}\n\n\tonMouseClick(e) {\n\t\t//this.setState({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\n\t\t//console.log(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n\t\tif (this.add) {\n\t\t\tthis.addData('Scatter Dataset', { x: 1, y: 10 });\n\t\t\tconsole.log(\"add\");\n\t\t\tthis.add = true;\n\t\t}\n\t}\n\n\taddData(label, data) {\n\t\tconst chart = this.chartReference.chartInstance;\n\t\tchart.data.labels.push(label);\n\t\tchart.data.datasets.forEach((dataset) => {\n\t\t\tdataset.data.push(data);\n\t\t});\n\t\tchart.update();\n\t}\n\n\tremoveData(elems) {\n\t\tif (elems[0] === undefined) {\n\t\t\tconsole.log(\"nothing there\");\n\t\t\tthis.add = true;\n\t\t} else {\n\t\t\tconst index = elems[0]._index;\n\t\t\tconsole.log(index);\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\tchart.data.datasets[0].data.splice(index, 1); // 0 default until i add example datasets\n\t\t\tchart.update();\n\t\t\tthis.add = false;\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='chart' onClick={this.add ? this.onMouseClick : undefined} >\n\t\t\t\t<Scatter ref={(reference) => this.chartReference = reference} data={this.state.data} options={this.state.options} onElementsClick={(elems) => { this.removeData(elems); }} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ClusteringVisualizer;\n","import React from 'react';\nimport './App.css';\nimport ClusteringVisualizer from './Components/ClusteringVisualizer';\r\n\nfunction App() {\n  return (\n\t  <div className=\"App\">\n\t\t  <ClusteringVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}