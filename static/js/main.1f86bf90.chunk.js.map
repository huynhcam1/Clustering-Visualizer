{"version":3,"sources":["Components/Header.jsx","Components/ClusteringVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","state","algorithm","handleSubmit","bind","handleChange","e","this","console","log","plotUNVotes","preventDefault","setState","target","value","className","onSubmit","onChange","width","height","type","Component","ClusteringVisualizer","chartReference","MAX_WIDTH","MAX_HEIGHT","removedPoint","data","datasets","label","x","y","pointBackgroundColor","pointHoverRadius","pointRadius","options","scales","xAxes","ticks","min","max","yAxes","onMouseClick","chart","chartInstance","x_offset","chartArea","left","right","chart_x","nativeEvent","offsetX","y_offset","top","bottom","chart_y","offsetY","addData","toFixed","labels","push","forEach","dataset","update","elems","undefined","index","_index","splice","onClick","ref","reference","onElementsClick","removeData","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f86bf90.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\talgorithm: 'none'\r\n\t\t};\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t//console.log(this);\r\n\t}\r\n\r\n\thandleSubmit(e) {\r\n\t\tif (this.state.algorithm === 'unvotes') {\r\n\t\t\tconsole.log(\"unvotes\");\r\n\t\t\tthis.plotUNVotes();\r\n\t\t}\r\n\t\te.preventDefault();\r\n\t}\r\n\r\n\thandleChange(e) {\r\n\t\tthis.setState({ algorithm: e.target.value });\r\n\t}\r\n\r\n\tplotUNVotes() { }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='header' onSubmit={this.handleSubmit} >\r\n\t\t\t\t<h1>Clustering Visualizer</h1>\r\n\t\t\t\t<form onChange={this.handleChange}>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tExample Datasets:\r\n\t\t\t\t\t\t<select width={100} height={100}>\r\n\t\t\t\t\t\t\t<option value=\"none\">None</option>\r\n\t\t\t\t\t\t\t<option value=\"unvotes\">UN Votes</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\r\n\t\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport './ClusteringVisualizer.css';\nimport { Scatter } from 'react-chartjs-2';\n\nclass ClusteringVisualizer extends Component {\n\tchartReference = {};\n\n\tMAX_WIDTH = 30;\n\tMAX_HEIGHT = 30;\n\n\tremovedPoint = false;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttype: 'scatter',\n\t\t\tdata: {\n\t\t\t\tdatasets: [{\n\t\t\t\t\tlabel: 'Scatter Dataset',\n\t\t\t\t\tdata: [{\n\t\t\t\t\t\tx: 1,\n\t\t\t\t\t\ty: 1\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 2,\n\t\t\t\t\t\ty: 2\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3.5,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3.6,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}],\n\t\t\t\t\tpointBackgroundColor: 'rgba(0, 0, 255, 1)',\n\t\t\t\t\tpointHoverRadius: 5,\n\t\t\t\t\tpointRadius: 5\n\t\t\t\t}]\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tscales: {\n\t\t\t\t\txAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: this.MAX_WIDTH\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: this.MAX_HEIGHT\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.onMouseClick = this.onMouseClick.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\t//console.log(this.chartReference.chartInstance);\n\t}\n\n\tonMouseClick(e) {\n\t\tif (!this.removedPoint) {\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\t// scale event's x-value to chart's x-value\n\t\t\tconst x_offset = chart.chartArea.left;\n\t\t\tconst width = chart.chartArea.right - x_offset;\n\t\t\tconst x = e.nativeEvent.offsetX - x_offset;\n\t\t\tconst chart_x = x / width * this.MAX_WIDTH;\n\t\t\t// scale event's y-value to chart's y-value\n\t\t\tconst y_offset = chart.chartArea.top;\n\t\t\tconst height = chart.chartArea.bottom - y_offset;\n\t\t\tconst y = e.nativeEvent.offsetY - y_offset;\n\t\t\tconst chart_y = y / height * this.MAX_HEIGHT;\n\t\t\tthis.addData(chart, 'Scatter Dataset', { x: chart_x.toFixed(2), y: (this.MAX_HEIGHT - chart_y).toFixed(2) });\n\t\t\tconsole.log(\"added (\" + chart_x.toFixed(2) + \", \" + (10 - chart_y).toFixed(2) + \")\");\n\t\t}\n\t}\n\n\taddData(chart, label, data) {\n\t\tchart.data.labels.push(label);\n\t\tchart.data.datasets.forEach((dataset) => {\n\t\t\tdataset.data.push(data);\n\t\t});\n\t\tchart.update();\n\t}\n\n\tremoveData(elems) {\n\t\tif (elems[0] === undefined) {\n\t\t\tconsole.log(\"nothing there\");\n\t\t\tthis.removedPoint = false;\n\t\t} else {\n\t\t\tconst index = elems[0]._index;\n\t\t\tconsole.log(index);\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\tchart.data.datasets[0].data.splice(index, 1); // 0 default until i add example datasets\n\t\t\tchart.update();\n\t\t\tthis.removedPoint = true;\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='chart' onClick={!this.removedPoint ? this.onMouseClick : undefined} >\n\t\t\t\t<Scatter ref={(reference) => this.chartReference = reference} data={this.state.data} options={this.state.options} onElementsClick={(elems) => { this.removeData(elems); }} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ClusteringVisualizer;\n","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport ClusteringVisualizer from './Components/ClusteringVisualizer';\r\n\nfunction App() {\n  return (\n\t  <div className=\"App\">\n\t\t  <Header />\n\t\t  <ClusteringVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}