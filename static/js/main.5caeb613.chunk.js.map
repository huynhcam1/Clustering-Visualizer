{"version":3,"sources":["Algorithms/KMeans.js","Algorithms/EM.js","Components/ClusteringVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["KMeans","chart","k","n","data","this","dataToArray","console","log","array","repeatRange","shuffle","z","gammas","zeros","j","gammasColSum","colSums","centroids","i","temp","push","distances","x","y","distance","Math","sqrt","min","Number","MAX_VALUE","length","datasets","count","floor","random","sums","rows","columns","EM","gammasCount","repeat","divideArray","mus","sigmas","h","covariance","value","numberoftimes","divisor","newArray","ClusteringVisualizer","props","chartReference","MAX_WIDTH","MAX_HEIGHT","removedPoint","dataset","algorithm","clusterCount","seed","state","type","label","pointBackgroundColor","pointHoverRadius","pointRadius","options","scales","xAxes","ticks","max","yAxes","handleSubmitDataset","bind","handleChangeDataset","handleSubmitAlgorithm","handleChangeAlgorithm","handleChangeClusterCount","onMouseClick","changeColor","toggleDropDownMenu","document","getElementsByClassName","e","plotUNVotes","preventDefault","target","chartInstance","prototype","x_offset","chartArea","left","width","right","chart_x","nativeEvent","offsetX","toFixed","y_offset","top","height","bottom","offsetY","chart_y","addData","parseFloat","update","r","PI","forEach","elems","undefined","index","_index","splice","labels","pop","UNVotes","setTimeout","style","display","className","onClick","ref","reference","onElementsClick","removeData","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5caeb613.chunk.js","sourcesContent":["class KMeans {\r\n\talgorithm(chart, k, n) {\r\n\t\tconst data = [];\r\n\t\tthis.dataToArray(chart, data, n, k);\r\n\t\tconsole.log(data);\r\n\t\tconst array = [];\r\n\t\tthis.repeatRange(array, k, n);\r\n\t\tthis.shuffle(array);\r\n\t\tconsole.log(array);\r\n\t\tfor (let z = 0; z < 10; z++) {\r\n\t\t\tconst gammas = [];\r\n\t\t\tthis.zeros(gammas, n, k);\r\n\t\t\t// for each row in gammas, set column j based on the randomly sorted array to 1\r\n\t\t\tfor (let j = 0; j < n; j++) {\r\n\t\t\t\tgammas[j][array[j] - 1] = 1;\r\n\t\t\t}\r\n\t\t\tconst gammasColSum = this.colSums(gammas, k, n);\r\n\t\t\t// console.log(gammasColSum);\r\n\t\t\tconst centroids = [];\r\n\t\t\tfor (let i = 1; i <= k; i++) {\r\n\t\t\t\t// copy array\r\n\t\t\t\tconst temp = [];\r\n\t\t\t\tfor (let j = 0; j < n; j++) {\r\n\t\t\t\t\tif (array[j] === i) {\r\n\t\t\t\t\t\ttemp.push(data[j]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttemp.push([0, 0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcentroids.push(this.colSums(temp, 2, n));\r\n\t\t\t\tcentroids[i-1][0] /= gammasColSum[i-1];\r\n\t\t\t\tcentroids[i-1][1] /= gammasColSum[i-1];\r\n\t\t\t}\r\n\t\t\t// console.log(centroids);\r\n\t\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\t\tconst distances = [];\r\n\t\t\t\tfor (let j = 0; j < k; j++) {\r\n\t\t\t\t\t// get euclidean distances\r\n\t\t\t\t\tlet x = data[i][0] - centroids[j][0];\r\n\t\t\t\t\tx *= x;\r\n\t\t\t\t\tlet y = data[i][1] - centroids[j][1];\r\n\t\t\t\t\ty *= y;\r\n\t\t\t\t\tlet distance = Math.sqrt(x + y);\r\n\t\t\t\t\tdistances.push(distance);\r\n\t\t\t\t}\r\n\t\t\t\t// find min distance and change point to new k value\r\n\t\t\t\tlet min = Number.MAX_VALUE;\r\n\t\t\t\tfor (let k = 0; k < distances.length; k++) {\r\n\t\t\t\t\tif (distances[k] < min) {\r\n\t\t\t\t\t\tarray[i] = k + 1;\r\n\t\t\t\t\t\tmin = distances[k];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\tdataToArray(chart, data, n, k) {\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tdata.push([]);\r\n\t\t\tdata[i][0] = chart.data.datasets[0].data[i].x;\r\n\t\t\tdata[i][1] = chart.data.datasets[0].data[i].y;\r\n\t\t}\r\n\t}\r\n\r\n\trepeatRange(array, k, n) {\r\n\t\tlet count = 0;\r\n\t\twhile (count < n) {\r\n\t\t\tfor (let i = 1; i < k + 1; i++) {\r\n\t\t\t\tif (count < n) {\r\n\t\t\t\t\tarray.push(i);\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// randomly reorder array\r\n\tshuffle(array) {\r\n\t\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\t\tlet j = Math.floor(Math.random() * (i + 1));\r\n\t\t\tlet temp = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\tcolSums(array, k, n) {\r\n\t\tconst sums = [];\r\n\t\tfor (let i = 0; i < k; i++) {\r\n\t\t\tsums.push(0);\r\n\t\t}\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tfor (let j = 0; j < k; j++) {\r\n\t\t\t\tsums[j] += array[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sums;\r\n\t}\r\n\r\n\tzeros(array, rows, columns) {\r\n\t\tfor (let i = 0; i < rows; i++) {\r\n\t\t\tarray.push([0]);\r\n\t\t\tfor (let j = 0; j < columns; j++) {\r\n\t\t\t\tarray[i][j] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default KMeans;","class EM {\r\n\talgorithm(chart, k, n) {\r\n\t\t// console.log(chart.data.datasets[0].data[0].x);\r\n\t\tconst array = [3,2,3,1,2,1];\r\n\t\t// this.repeatRange(array, k, n);\r\n\t\t// this.shuffle(array);\r\n\t\t// console.log(array);\r\n\t\tconst gammas = [];\r\n\t\tthis.zeros(gammas, n, k);\r\n\t\t// for each row in gammas, set column j based on the randomly sorted array to 1\r\n\t\tfor (let j = 0; j < n; j++) {\r\n\t\t\tgammas[j][array[j]-1] = 1;\r\n\t\t}\r\n\t\t// console.log(gammas);\r\n\t\tconst gammasColSum = this.colSums(gammas, k, n);\r\n\t\t// console.log(gammasColSum);\r\n\t\tconst gammasCount = [];\r\n\t\tthis.repeat(gammasCount, n, k);\r\n\t\tconst pis = this.divideArray(gammasColSum, gammasCount);\r\n\t\t// console.log(pis);\r\n\t\tconst data = [];\r\n\t\tthis.dataToArray(chart, data, n, k);\r\n\t\t// console.log(data);\r\n\t\tlet mus = [];\r\n\t\t// k = 3, columns = 2 (x, y)\r\n\t\tthis.zeros(mus, 3, 2);\r\n\t\tlet sigmas = [];\r\n\t\tfor (let j = 0; j < k; j++) {\r\n\t\t\tsigmas.push([]);\r\n\t\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\t\tmus[j][0] += data[i][0] * gammas[i][j];\r\n\t\t\t\tmus[j][1] += data[i][1] * gammas[i][j];\r\n\t\t\t\tsigmas[j].push([data[i][0] * gammas[i][j], data[i][1] * gammas[i][j]]);\r\n\t\t\t}\r\n\t\t\tmus[j][0] /= gammasColSum[j];\r\n\t\t\tmus[j][1] /= gammasColSum[j];\r\n\r\n\t\t}\r\n\t\t// console.log(mus);\r\n\t\t// console.log(sigmas);\r\n\t\t// console.log(sigmas[0]);\r\n\t\tfor (let h = 0; h < 3; h++) {\r\n\t\t\tlet covariance = [];\r\n\t\t\tthis.zeros(covariance, 2, 2);\r\n\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\tfor (let j = 0; j < n; j++) {\r\n\t\t\t\t\tcovariance[i][0] += sigmas[h][j][i] * data[j][0];\r\n\t\t\t\t\tcovariance[i][1] += sigmas[h][j][i] * data[j][1];\r\n\t\t\t\t}\r\n\t\t\t\tcovariance[i][0] /= gammasColSum[1];\r\n\t\t\t\tcovariance[i][1] /= gammasColSum[1];\r\n\t\t\t}\r\n\t\t\tsigmas[h] = covariance;\r\n\t\t}\r\n\t\tconsole.log(sigmas);\r\n\t\t\r\n\t}\r\n\r\n\tdataToArray(chart, data, n, k) {\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tdata.push([]);\r\n\t\t\tdata[i][0] = chart.data.datasets[0].data[i].x;\r\n\t\t\tdata[i][1] = chart.data.datasets[0].data[i].y;\r\n\t\t}\r\n\t}\r\n\r\n\trepeatRange(array, k, n) {\r\n\t\tlet count = 0;\r\n\t\twhile (count < n) {\r\n\t\t\tfor (let i = 1; i < k + 1; i++) {\r\n\t\t\t\tif (count < n) {\r\n\t\t\t\t\tarray.push(i);\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trepeat(array, value, numberoftimes) {\r\n\t\tfor (let i = 0; i < numberoftimes; i++) {\r\n\t\t\tarray.push(value);\r\n\t\t}\r\n\t}\r\n\r\n\t// randomly reorder array\r\n\tshuffle(array) {\r\n\t\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\t\tlet j = Math.floor(Math.random() * (i + 1));\r\n\t\t\tlet temp = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\tzeros(array, rows, columns) {\r\n\t\tfor (let i = 0; i < rows; i++) {\r\n\t\t\tarray.push([0]);\r\n\t\t\tfor (let j = 0; j < columns; j++) {\r\n\t\t\t\tarray[i][j] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcolSums(array, k, n) {\r\n\t\tconst sums = [];\r\n\t\tfor (let i = 0; i < k; i++) {\r\n\t\t\tsums.push(0);\r\n\t\t}\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tfor (let j = 0; j < k; j++) {\r\n\t\t\t\tsums[j] += array[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sums;\r\n\t}\r\n\r\n\tdivideArray(array, divisor) {\r\n\t\tconst newArray = [];\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tnewArray.push(array[i] / divisor[i]);\r\n\t\t}\r\n\t\treturn newArray;\r\n\t}\r\n}\r\n\r\nexport default EM;","import React, { Component } from 'react';\nimport './ClusteringVisualizer.css';\nimport { Scatter } from 'react-chartjs-2';\n// datasets\nimport UNVotes from '../Data/UN_Votes_MDS.json';\r\n// algorithms\r\nimport KMeans from '../Algorithms/KMeans.js';\r\nimport EM from '../Algorithms/EM.js';\r\n\nclass ClusteringVisualizer extends Component {\n\t// initialize chart\n\tchartReference = {};\n\n\t// set plot width and height boundaries\n\tMAX_WIDTH = 30;\n\tMAX_HEIGHT = 16;\n\n\t// value to determine whether a point is being removed onClick to prevent adding after removed point\n\tremovedPoint = false;\n\n\t// initialize dataset, algorithm, and cluster count variables as none\n\tdataset = 'none';\n\talgorithm = 'none';\n\tclusterCount = 1;\n\n\t// for randomization (CURRENTLY NOT NEEDED)\n\tseed = 1;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttype: 'scatter',\n\t\t\tdata: {\n\t\t\t\tdatasets: [{\n\t\t\t\t\tlabel: 'Scatter Dataset',\n\t\t\t\t\tdata: [{\n\t\t\t\t\t\tx: 1,\n\t\t\t\t\t\ty: 1\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 2,\n\t\t\t\t\t\ty: 2\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3.5,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}, {\n\t\t\t\t\t\tx: 3.6,\n\t\t\t\t\t\ty: 3\n\t\t\t\t\t}],\n\t\t\t\t\tpointBackgroundColor: ['Blue', 'Blue', 'Blue', 'Blue'],\n\t\t\t\t\tpointHoverRadius: 5,\n\t\t\t\t\tpointRadius: 5\n\t\t\t\t}]\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tscales: {\n\t\t\t\t\txAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: this.MAX_WIDTH\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: this.MAX_HEIGHT\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// bind functions that HTML references\n\t\tthis.handleSubmitDataset = this.handleSubmitDataset.bind(this);\n\t\tthis.handleChangeDataset = this.handleChangeDataset.bind(this);\n\t\tthis.handleSubmitAlgorithm = this.handleSubmitAlgorithm.bind(this);\n\t\tthis.handleChangeAlgorithm = this.handleChangeAlgorithm.bind(this);\n\t\tthis.handleChangeClusterCount = this.handleChangeClusterCount.bind(this);\n\t\tthis.onMouseClick = this.onMouseClick.bind(this);\n\t\tthis.changeColor = this.changeColor.bind(this);\n\t\tthis.toggleDropDownMenu = this.toggleDropDownMenu.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log(document.getElementsByClassName(\"dropbtn\")[0]);\n\t\t//for (let k = 0; k < 10; k++) {\r\n\t\t//\tconsole.log(this.psora(k, this.seed));\r\n\t\t//}\n\t}\n\n\t// when the button for dataset is submitted, plot data for selected dataset\n\thandleSubmitDataset(e) {\n\t\tif (this.dataset === 'unvotes') {\n\t\t\tthis.plotUNVotes(); // will change state of data\n\t\t}\n\t\te.preventDefault();\n\t}\n\n\thandleChangeDataset(e) {\n\t\tthis.dataset = e.target.value;\n\t\tconsole.log(e.target.value);\n\t\tthis.toggleDropDownMenu(0);\n\t}\n\n\t// when the button for algorithms is submitted, cluster the current data based on the selected algorithm\n\thandleSubmitAlgorithm(e) {\n\t\tif (this.algorithm === 'kmeans') {\n\t\t\tconst k = this.clusterCount;\n\t\t\tconst n = this.chartReference.chartInstance.data.datasets[0].data.length;\n\t\t\tconst array = KMeans.prototype.algorithm(this.chartReference.chartInstance, k, n);\n\t\t\tconsole.log(array);\n\t\t\tthis.changeColor(this.chartReference.chartInstance, array);\n\t\t} else if (this.algorithm === 'em') {\n\t\t\tconst k = this.clusterCount;\n\t\t\tconst n = 6;\n\t\t\tEM.prototype.algorithm(this.chartReference.chartInstance, k, n);\n\t\t}\n\t\te.preventDefault();\n\t}\n\n\thandleChangeAlgorithm(e) {\n\t\tthis.algorithm = e.target.value;\n\t\tconsole.log(e.target.value);\n\t\tthis.toggleDropDownMenu(1);\n\t}\n\n\thandleChangeClusterCount(e) {\n\t\tthis.clusterCount = e.target.value;\n\t\tconsole.log(e.target.value);\n\t\tthis.toggleDropDownMenu(2);\n\t}\n\n\t// when mouse is clicked on the graph, scale mouse coordinates to match graph axis\n\tonMouseClick(e) {\n\t\tif (!this.removedPoint) {\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\t// scale event's x-value to chart's x-value\n\t\t\tconst x_offset = chart.chartArea.left;\n\t\t\tconst width = chart.chartArea.right - x_offset;\n\t\t\tconst x = e.nativeEvent.offsetX - x_offset;\n\t\t\tconst chart_x = (x / width * this.MAX_WIDTH).toFixed(2);\n\t\t\t// scale event's y-value to chart's y-value\n\t\t\tconst y_offset = chart.chartArea.top;\n\t\t\tconst height = chart.chartArea.bottom - y_offset;\n\t\t\tconst y = e.nativeEvent.offsetY - y_offset;\n\t\t\tconst chart_y = (this.MAX_HEIGHT - y / height * this.MAX_HEIGHT).toFixed(2);\n\t\t\t// check if chart_x and chart_y are within visible plot width, then add to plot\n\t\t\tif (chart_y <= this.MAX_WIDTH && chart_y <= this.MAX_HEIGHT) {\n\t\t\t\tthis.addData(chart, { x: parseFloat(chart_x), y: parseFloat(chart_y) });\n\t\t\t\tconsole.log(\"added (\" + chart_x + \", \" + chart_y + \")\");\n\t\t\t}\n\t\t}\n\t}\n\n\t// change color for each point to match differentiate the clusters\n\tchangeColor(chart, array) {\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tif (array[i] === 1) {\n\t\t\t\tchart.data.datasets[0].pointBackgroundColor[i] = 'Blue';\n\t\t\t} else if (array[i] === 2) {\n\t\t\t\tchart.data.datasets[0].pointBackgroundColor[i] = 'Green';\n\t\t\t} else {\n\t\t\t\tchart.data.datasets[0].pointBackgroundColor[i] = 'Red';\n\t\t\t}\n\t\t}\n\t\tchart.update();\n\t}\n\n\t// for randomization (NOT CURRENTLY USED)\n\tpsora(k, n) {\n\t\tconst r = Math.PI * (k ^ n);\n\t\treturn r - Math.floor(r);\n\t}\n\n\t// addData runs after removeData\n\taddData(chart, data) {\n\t\tchart.data.datasets.forEach((dataset) => {\n\t\t\tdataset.data.push(data);\n\t\t\tdataset.pointBackgroundColor.push('Blue');\n\t\t});\n\t\tchart.update();\n\t}\n\n\t// removes data from chart if there exists in datapoint when clicked\n\tremoveData(elems) {\n\t\tif (elems[0] === undefined) {\n\t\t\tconsole.log(\"nothing there\");\n\t\t\tthis.removedPoint = false;\n\t\t} else {\n\t\t\tconst chart = this.chartReference.chartInstance;\n\t\t\tconst index = elems[0]._index;\n\t\t\tconsole.log(index);\n\t\t\tchart.data.datasets[0].data.splice(index, 1); // 0 default until i add example datasets\n\t\t\tchart.data.datasets[0].pointBackgroundColor.splice(index, 1);\n\t\t\tchart.update();\n\t\t\tthis.removedPoint = true;\n\t\t}\n\t}\n\n\tplotUNVotes() {\n\t\tconst chart = this.chartReference.chartInstance;\n\t\t// clear previous data\n\t\twhile (this.state.data.datasets[0].data.length > 0) {\n\t\t\tchart.data.labels.pop();\n\t\t\tchart.data.datasets.forEach((dataset) => {\n\t\t\t\tdataset.data.pop();\n\t\t\t\tdataset.pointBackgroundColor.pop();\n\t\t\t});\n\t\t}\n\t\tlet count = 0;\n\t\tUNVotes.forEach((data) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tchart.data.datasets[0].data.push(data);\n\t\t\t\tchart.data.datasets[0].pointBackgroundColor.push('Blue');\n\t\t\t\tchart.update();\n\t\t\t}, 25 * count);\n\t\t\tcount++;\n\t\t\tconsole.log(count);\n\t\t});\n\t}\n\n\ttoggleDropDownMenu(index) {\n\t\tvar x = document.getElementsByClassName(\"dropdown-content\");\n\t\tif (x[index].style.display === 'block') {\n\t\t\tx[index].style.display = 'none';\r\n\t\t} else {\n\t\t\tx[index].style.display = 'block';\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1>Clustering Visualizer</h1>\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li className=\"dropdown\">\r\n\t\t\t\t\t\t<option className=\"dropbtn\" onClick={() => this.toggleDropDownMenu(0)}>Datasets</option>\r\n\t\t\t\t\t\t<div className=\"dropdown-content\">\r\n\t\t\t\t\t\t\t<button type=\"button\" value=\"unvotes\" onClick={this.handleChangeDataset}> UN Votes </button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"dropdown\">\r\n\t\t\t\t\t\t<option className=\"dropbtn\" onClick={this.handleSubmitDataset}>Visualize!</option>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"dropdown\">\r\n\t\t\t\t\t\t<option className=\"dropbtn\" onClick={() => this.toggleDropDownMenu(1)}>Algorithms</option>\r\n\t\t\t\t\t\t<div className=\"dropdown-content\">\r\n\t\t\t\t\t\t\t<button type=\"button\" value=\"kmeans\" onClick={this.handleChangeAlgorithm}>K-Means</button>\r\n\t\t\t\t\t\t\t<button type=\"button\" value=\"em\" onClick={this.handleChangeAlgorithm}>Expectation-Maximization (in progress)</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"dropdown\">\r\n\t\t\t\t\t\t<option className=\"dropbtn\" onClick={() => this.toggleDropDownMenu(2)}>Cluster Count</option>\r\n\t\t\t\t\t\t<div className=\"dropdown-content\">\r\n\t\t\t\t\t\t\t<button type=\"button\" value=\"1\" onClick={this.handleChangeClusterCount}>1</button>\r\n\t\t\t\t\t\t\t<button type=\"button\" value=\"2\" onClick={this.handleChangeClusterCount}>2</button>\r\n\t\t\t\t\t\t\t<button type=\"button\" value=\"3\" onClick={this.handleChangeClusterCount}>3</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"dropdown\">\r\n\t\t\t\t\t\t<option className=\"dropbtn\" onClick={this.handleSubmitAlgorithm}>Cluster!</option>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\n\t\t\t\t<div className='chart' onClick={!this.removedPoint ? this.onMouseClick : undefined} >\n\t\t\t\t\t<Scatter ref={(reference) => this.chartReference = reference} data={this.state.data} options={this.state.options} onElementsClick={(elems) => { this.removeData(elems); }} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ClusteringVisualizer;\n","import React from 'react';\nimport './App.css';\nimport ClusteringVisualizer from './Components/ClusteringVisualizer';\r\n\nfunction App() {\n  return (\n\t  <div className=\"App\">\n\t\t  <ClusteringVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}